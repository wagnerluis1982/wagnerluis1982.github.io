<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programação on Wagner Macedo</title><link>https://wagnerluis1982.github.io/pt/tags/programa%C3%A7%C3%A3o/</link><description>Recent content in programação on Wagner Macedo</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Aug 2013 20:03:00 -0300</lastBuildDate><atom:link href="https://wagnerluis1982.github.io/pt/tags/programa%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml"/><item><title>Compilando builds diários do LibreOffice</title><link>https://wagnerluis1982.github.io/pt/posts/2013/08/compilando-builds-diarios-do-libreoffice/</link><pubDate>Tue, 06 Aug 2013 20:03:00 -0300</pubDate><guid>https://wagnerluis1982.github.io/pt/posts/2013/08/compilando-builds-diarios-do-libreoffice/</guid><description>Já faz algum tempo que quero participar de algum projeto de software livre. Da semana passada para cá eu decidi me juntar ao desenvolvimento do LibreOffice.
Primeira tarefa para me tornar um iniciado: executar a compilação completa do pacote.
Tamanho da tarefa Para se ter uma ideia, segundo a página do LibreOffice Brasil uma compilação completa pode demorar assustadoras 8 horas, com todos os núcleos do processador a 100%.
No meu caso, que o meu computador é um modesto Core 2 Duo T6600 2.</description></item><item><title>Utilitário: Monitor and Run</title><link>https://wagnerluis1982.github.io/pt/posts/2013/02/utilitario-monitor-and-run/</link><pubDate>Sun, 24 Feb 2013 04:03:00 -0300</pubDate><guid>https://wagnerluis1982.github.io/pt/posts/2013/02/utilitario-monitor-and-run/</guid><description>Olá pessoal,
Escrevi um pequeno programa em Python chamado monrun para resolver um pequeno probleminha meu e resolvi compartilhar.
Para que serve? É a pergunta que não cala. Ele serve para executar um comando toda vez que um arquivo foi modificado, simplesmente.
E para que eu quero isso? Bom, a utilidade depende da pessoa. Para mim, pessoalmente, eu às vezes utilizo LaTeX para escrever textos mais profissionais.
No uso do LaTeX é preciso, para ver o resultado do texto formatado, fazer a compilação para gerar PDF e eu acho chato ter que ficar alternando a minha janela o tempo todo para executar o comando.</description></item><item><title>Divagações sobre programação</title><link>https://wagnerluis1982.github.io/pt/posts/2012/11/divagacoes-sobre-programacao/</link><pubDate>Sat, 17 Nov 2012 06:40:00 -0300</pubDate><guid>https://wagnerluis1982.github.io/pt/posts/2012/11/divagacoes-sobre-programacao/</guid><description>Depois de mais de um mês sem nenhum post devido à varias atividades que estavam me sugando até o osso, eu apresento um post light com algumas divagações sobre a atividade da programação de computadores.
Eu acho que programar é uma das atividades mais gratificantes. Quando programamos, nos sentimos poderosos, podemos criar qualquer coisa, o limite é a nossa imaginação. Isso me lembra do anel do Lanterna Verde, que é considerado no seu mundo dos quadrinhos a arma mais poderosa do universo (sim, eu curto quadrinhos).</description></item><item><title>Estrutura try..finally</title><link>https://wagnerluis1982.github.io/pt/posts/2012/10/estrutura-tryfinally/</link><pubDate>Tue, 09 Oct 2012 11:23:00 -0300</pubDate><guid>https://wagnerluis1982.github.io/pt/posts/2012/10/estrutura-tryfinally/</guid><description>O controle de exceções é um recurso fundamental na Programação Orientada a Objetos. Geralmente usamos o famoso try..catch para controlar as exceções no Java ou em outras linguagens que adotam a POO (com notações levemente diferentes).
// try..catch em Java try { ... } catch (Exception e) { ... } Mas, geralmente, quando estamos criando métodos, muitas vezes queremos que as exceções sejam lançadas para fora, assim usamos o try..catch e relançamos a exceção no bloco catch.</description></item></channel></rss>